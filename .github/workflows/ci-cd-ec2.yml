name: CI/CD to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: set_tag
        run: |
          echo "TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend:${{ steps.set_tag.outputs.tag }}

      - name: Build & push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/todo-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/todo-frontend:${{ steps.set_tag.outputs.tag }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Wait for images to be available
        run: sleep 5

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            set -e
            echo "Logging into Docker Hub on remote"
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            mkdir -p ~/stock-todo
            cd ~/stock-todo

            export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            export TAG=${{ needs.build-and-push.outputs.image_tag }}

            cat > docker-compose.yml <<EOF
            version: '3.8'
            services:
              backend:
                image: $DOCKERHUB_USERNAME/todo-backend:${TAG}
                container_name: todo-backend
                restart: always
                ports:
                  - "4000:4000"
                volumes:
                  - backend-data:/app/data

              frontend:
                image: $DOCKERHUB_USERNAME/todo-frontend:${TAG}
                container_name: todo-frontend
                restart: always
                ports:
                  - "80:80"

            volumes:
              backend-data:
            EOF

            docker-compose pull
            docker-compose up -d --remove-orphans
            docker system prune -f
